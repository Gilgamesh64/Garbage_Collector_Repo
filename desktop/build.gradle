plugins {
    id 'java-library'
    id 'eclipse'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

// -------------------- Configurations --------------------
configurations {
    texturePacker
}

// -------------------- Dependencies --------------------
dependencies {
    // Core project
    implementation project(":core")

    // Desktop runtime dependencies
    api "com.badlogicgames.gdx:gdx-backend-lwjgl3:$gdxVersion"
    api "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx:gdx-box2d-platform:$gdxVersion:natives-desktop"
    api "com.badlogicgames.gdx:gdx-freetype-platform:$gdxVersion:natives-desktop"

    // gdx-tools only for TexturePacker
    texturePacker "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
}

// -------------------- Source Sets --------------------
sourceSets {
    main {
        java {
            srcDirs = ["src/"]
        }
        resources {
            srcDirs = ["../assets"]
        }
    }
}

// -------------------- Project Properties --------------------
project.ext {
    mainClassName = "com.mygdx.game.DesktopLauncher"
    assetsDir = file("../assets")
}

import org.gradle.internal.os.OperatingSystem
import java.nio.file.Files
import java.nio.file.StandardCopyOption

// -------------------- Run Task --------------------
tasks.register('run', JavaExec) {
    group = "application"
    dependsOn classes
    mainClass.set(project.ext.mainClassName)
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.projectDir.parentFile  // <-- set to project root

    if (OperatingSystem.current() == OperatingSystem.MAC_OS) {
        jvmArgs += "-XstartOnFirstThread"
    }
}

tasks.register('debug', JavaExec) {
    group = "application"
    dependsOn classes
    mainClass.set(project.ext.mainClassName)
    classpath = sourceSets.main.runtimeClasspath
    standardInput = System.in
    workingDir = project.projectDir.parentFile  // <-- project root
    debug = true
}


// -------------------- Dist Task --------------------
tasks.register('dist', Jar) {
    duplicatesStrategy(DuplicatesStrategy.EXCLUDE)
    manifest {
        attributes 'Main-Class': project.ext.mainClassName
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}
tasks.named('dist').configure { dependsOn classes }

// -------------------- Pack NPCs Atlas --------------------
tasks.register("packNpcsAtlas", JavaExec) {
    group = "assets"
    description = "Packs all NPC assets into a single TextureAtlas"

    def assetsDir = new File(project.projectDir, "../assets").canonicalFile
    def inputDir = new File(assetsDir, "npcs")
    def outputDir = new File(assetsDir, "packed")
    def tempDir = new File(assetsDir, "tmp_npcs_flat")

    mainClass.set("com.badlogic.gdx.tools.texturepacker.TexturePacker")
    classpath = configurations.texturePacker

    args = [
        tempDir.absolutePath,
        outputDir.absolutePath,
        "npcs"
    ]

    doFirst {
        if (!inputDir.exists()) throw new GradleException("Input directory not found: $inputDir")

        println "Preparing temp folder..."
        if (tempDir.exists()) tempDir.deleteDir()
        tempDir.mkdirs()

        // Flatten all NPC images
        inputDir.eachFileRecurse { file ->
            if (file.isFile() && file.name.toLowerCase().endsWith(".png")) {
                Files.copy(file.toPath(), new File(tempDir, file.name).toPath(), StandardCopyOption.REPLACE_EXISTING)
            }
        }

        println "Packing NPCs from: ${tempDir.absolutePath}"
        println "Output directory: ${outputDir.absolutePath}"
    }

    doLast {
        println "NPC TextureAtlas created successfully."
        if (tempDir.exists()) {
            println "Deleting temporary folder: ${tempDir.absolutePath}"
            tempDir.deleteDir()
        }
    }
}

